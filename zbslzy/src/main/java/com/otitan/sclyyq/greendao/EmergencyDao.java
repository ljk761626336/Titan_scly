package com.otitan.sclyyq.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.otitan.sclyyq.entity.Emergency;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Emergency".
*/
public class EmergencyDao extends AbstractDao<Emergency, Long> {

    public static final String TABLENAME = "Emergency";

    /**
     * Properties of entity Emergency.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property XJ_JD = new Property(1, String.class, "XJ_JD", false, "XJ__JD");
        public final static Property XJ_WD = new Property(2, String.class, "XJ_WD", false, "XJ__WD");
        public final static Property XJ_SJMC = new Property(3, String.class, "XJ_SJMC", false, "XJ__SJMC");
        public final static Property XJ_MSXX = new Property(4, String.class, "XJ_MSXX", false, "XJ__MSXX");
        public final static Property XJ_ZPDZ = new Property(5, String.class, "XJ_ZPDZ", false, "XJ__ZPDZ");
        public final static Property XJ_SBBH = new Property(6, String.class, "XJ_SBBH", false, "XJ__SBBH");
        public final static Property REMARK = new Property(7, String.class, "REMARK", false, "REMARK");
        public final static Property XJ_SPDZ = new Property(8, String.class, "XJ_SPDZ", false, "XJ__SPDZ");
        public final static Property XJ_YPDZ = new Property(9, String.class, "XJ_YPDZ", false, "XJ__YPDZ");
        public final static Property XJ_XXDZ = new Property(10, String.class, "XJ_XXDZ", false, "XJ__XXDZ");
        public final static Property XJ_LX = new Property(11, String.class, "XJ_LX", false, "XJ__LX");
        public final static Property XC_ID = new Property(12, String.class, "XC_ID", false, "XC__ID");
    }


    public EmergencyDao(DaoConfig config) {
        super(config);
    }
    
    public EmergencyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Emergency\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"XJ__JD\" TEXT," + // 1: XJ_JD
                "\"XJ__WD\" TEXT," + // 2: XJ_WD
                "\"XJ__SJMC\" TEXT," + // 3: XJ_SJMC
                "\"XJ__MSXX\" TEXT," + // 4: XJ_MSXX
                "\"XJ__ZPDZ\" TEXT," + // 5: XJ_ZPDZ
                "\"XJ__SBBH\" TEXT," + // 6: XJ_SBBH
                "\"REMARK\" TEXT," + // 7: REMARK
                "\"XJ__SPDZ\" TEXT," + // 8: XJ_SPDZ
                "\"XJ__YPDZ\" TEXT," + // 9: XJ_YPDZ
                "\"XJ__XXDZ\" TEXT," + // 10: XJ_XXDZ
                "\"XJ__LX\" TEXT," + // 11: XJ_LX
                "\"XC__ID\" TEXT);"); // 12: XC_ID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Emergency\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Emergency entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String XJ_JD = entity.getXJ_JD();
        if (XJ_JD != null) {
            stmt.bindString(2, XJ_JD);
        }
 
        String XJ_WD = entity.getXJ_WD();
        if (XJ_WD != null) {
            stmt.bindString(3, XJ_WD);
        }
 
        String XJ_SJMC = entity.getXJ_SJMC();
        if (XJ_SJMC != null) {
            stmt.bindString(4, XJ_SJMC);
        }
 
        String XJ_MSXX = entity.getXJ_MSXX();
        if (XJ_MSXX != null) {
            stmt.bindString(5, XJ_MSXX);
        }
 
        String XJ_ZPDZ = entity.getXJ_ZPDZ();
        if (XJ_ZPDZ != null) {
            stmt.bindString(6, XJ_ZPDZ);
        }
 
        String XJ_SBBH = entity.getXJ_SBBH();
        if (XJ_SBBH != null) {
            stmt.bindString(7, XJ_SBBH);
        }
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(8, REMARK);
        }
 
        String XJ_SPDZ = entity.getXJ_SPDZ();
        if (XJ_SPDZ != null) {
            stmt.bindString(9, XJ_SPDZ);
        }
 
        String XJ_YPDZ = entity.getXJ_YPDZ();
        if (XJ_YPDZ != null) {
            stmt.bindString(10, XJ_YPDZ);
        }
 
        String XJ_XXDZ = entity.getXJ_XXDZ();
        if (XJ_XXDZ != null) {
            stmt.bindString(11, XJ_XXDZ);
        }
 
        String XJ_LX = entity.getXJ_LX();
        if (XJ_LX != null) {
            stmt.bindString(12, XJ_LX);
        }
 
        String XC_ID = entity.getXC_ID();
        if (XC_ID != null) {
            stmt.bindString(13, XC_ID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Emergency entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String XJ_JD = entity.getXJ_JD();
        if (XJ_JD != null) {
            stmt.bindString(2, XJ_JD);
        }
 
        String XJ_WD = entity.getXJ_WD();
        if (XJ_WD != null) {
            stmt.bindString(3, XJ_WD);
        }
 
        String XJ_SJMC = entity.getXJ_SJMC();
        if (XJ_SJMC != null) {
            stmt.bindString(4, XJ_SJMC);
        }
 
        String XJ_MSXX = entity.getXJ_MSXX();
        if (XJ_MSXX != null) {
            stmt.bindString(5, XJ_MSXX);
        }
 
        String XJ_ZPDZ = entity.getXJ_ZPDZ();
        if (XJ_ZPDZ != null) {
            stmt.bindString(6, XJ_ZPDZ);
        }
 
        String XJ_SBBH = entity.getXJ_SBBH();
        if (XJ_SBBH != null) {
            stmt.bindString(7, XJ_SBBH);
        }
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(8, REMARK);
        }
 
        String XJ_SPDZ = entity.getXJ_SPDZ();
        if (XJ_SPDZ != null) {
            stmt.bindString(9, XJ_SPDZ);
        }
 
        String XJ_YPDZ = entity.getXJ_YPDZ();
        if (XJ_YPDZ != null) {
            stmt.bindString(10, XJ_YPDZ);
        }
 
        String XJ_XXDZ = entity.getXJ_XXDZ();
        if (XJ_XXDZ != null) {
            stmt.bindString(11, XJ_XXDZ);
        }
 
        String XJ_LX = entity.getXJ_LX();
        if (XJ_LX != null) {
            stmt.bindString(12, XJ_LX);
        }
 
        String XC_ID = entity.getXC_ID();
        if (XC_ID != null) {
            stmt.bindString(13, XC_ID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Emergency readEntity(Cursor cursor, int offset) {
        Emergency entity = new Emergency( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // XJ_JD
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // XJ_WD
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // XJ_SJMC
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // XJ_MSXX
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // XJ_ZPDZ
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // XJ_SBBH
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // REMARK
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // XJ_SPDZ
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // XJ_YPDZ
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // XJ_XXDZ
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // XJ_LX
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // XC_ID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Emergency entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setXJ_JD(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setXJ_WD(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setXJ_SJMC(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setXJ_MSXX(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setXJ_ZPDZ(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setXJ_SBBH(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setREMARK(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setXJ_SPDZ(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setXJ_YPDZ(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setXJ_XXDZ(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setXJ_LX(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setXC_ID(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Emergency entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Emergency entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Emergency entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
